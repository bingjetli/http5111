/**** References ****/
/*
  https://css-tricks.com/a-complete-guide-to-calc-in-css/
  https://css-tricks.com/snippets/css/keyframe-animation-syntax/
  https://css-tricks.com/updating-a-css-variable-with-javascript/
  https://medium.com/@alperen.talaslioglu/javascript-dom-manipulations-and-performance-0b4b8d2a16bb
  https://dev.to/gopal1996/understanding-reflow-and-repaint-in-the-browser-1jbg
  https://javascript.info/modifying-document
*/



/**** Custom Fonts ****/

@font-face {
  font-family: "KumarOne-Regular";
  src: url("fonts/kumar-one/KumarOne-Regular.ttf");
}

@font-face {
  font-family: "InterTight-Regular";
  src: url("fonts/inter-tight/InterTight-Regular.ttf");
}
@font-face {
  font-family: "InterTight-Medium";
  src: url("fonts/inter-tight/InterTight-Medium.ttf");
}




/**** Global Css Variables ****/

/* VARIABLE PREFIXES
  Variables prefixed with `gv` are global variables defined here in the
  root selector.

  Variables without this prefix are local variables and are expected to
  be defined using inline styles on the actual element the css will be
  applied to.
 */
:root {
  /*UNIT CONVERTERS
    Since the math operators of `calc()` have different unit rules, it
    might be better to store all variables without their units attached
    and then convert to their units by multiplying by a `unit converter`.

    Unit-less variables should then be suffix'd with their expected 
    unit in their identifier.
   */
  --TO-PIXEL : 1px;
  --TO-PERCENT : 1%;
  --TO-SECONDS : 1s;
  --TO-DEGREES : 1deg;
  --TO-EM : 1em;

  --gv-gravity-pc : 50;
  --gv-fruit-half-gravity-multiplier : 10;
  --gv-fruit-half-initial-x-velocity-pc : -66;
  --gv-fruit-half-initial-y-velocity-pc : -50;
  --gv-entity-size-em : 7;
  --gv-mouse-x-px : 0;
  --gv-mouse-y-px : 0;
}




/**** Css Resets ****/

html {
  box-sizing: border-box;
}

body {
  margin:0;
  padding: 0;
}

*, *:before, *:after {
  box-sizing: inherit;
}




/**** Main Css ****/

body {
  overflow: hidden ;
}

main {
  background-color: #aaa;
  min-height: 100vh;
  max-height: 100vh;

  min-width: 100vw;
  max-width: 100vw;

  display: flex;
}

#viewport {
  cursor: crosshair;

  min-width: 100%;
  max-width: 100%;
  min-height: 100%;
  max-height: 100%;
}

#score-container{
  color: white;
  text-shadow: 
    2px 2px 5px hotpink, 
    2px -2px 5px hotpink, 
    -2px -2px 5px hotpink,
    -2px 2px 5px hotpink;

  position: fixed;

  font-size: calc(
    var(--gv-entity-size-em) * 0.5 * var(--TO-EM)
  );

  font-family: "KumarOne-Regular";

  z-index: 0;

  margin-top: 0.25em;
  margin-left: 0.25em;
}

#initial-score-container{
  color: white;
  text-shadow: 
    2px 2px 5px hotpink, 
    2px -2px 5px hotpink, 
    -2px -2px 5px hotpink,
    -2px 2px 5px hotpink;

  position: fixed;

  font-size: calc(
    var(--gv-entity-size-em) * 0.33 * var(--TO-EM)
  );

  font-family: "KumarOne-Regular";

  z-index: 0;

  margin-top: 2em;
  margin-left: 0.5em;
}

#multiplier-container{
  color: white;
  text-shadow: 
    2px 2px 5px hotpink, 
    2px -2px 5px hotpink, 
    -2px -2px 5px hotpink,
    -2px 2px 5px hotpink;

  position: fixed;

  font-size: calc(
    var(--gv-entity-size-em) * 0.33 * var(--TO-EM)
  );

  font-family: "KumarOne-Regular";

  z-index: 0;

  margin-top: 3em;
  margin-left: 0.5em;
}

#lives-container{
  color: white;
  text-shadow: 
    2px 2px 5px hotpink, 
    2px -2px 5px hotpink, 
    -2px -2px 5px hotpink,
    -2px 2px 5px hotpink;

  position: fixed;
  right: 0;

  font-size: calc(
    var(--gv-entity-size-em) * 0.5 * var(--TO-EM)
  );

  font-family: "KumarOne-Regular";

  z-index: 0;

  margin-top: 0.25em;
  margin-right: 0.25em;
}

#gameover-dialog,
#intro-dialog {
  color: white;
  padding-top: 1em;
  padding-bottom: 1em;

  position: fixed;
  top: 10%;
  z-index: 0;

  font-family: "KumarOne-Regular";
  text-align: center;

  min-width: 100%;
}

#gameover-dialog > div,
#intro-dialog > div {
  font-size: max(5vw, 2em);
  margin: 0;

  text-shadow: 
    2px 2px 5px hotpink, 
    2px -2px 5px hotpink, 
    -2px -2px 5px hotpink,
    -2px 2px 5px hotpink;
}

#gameover-dialog > p,
#intro-dialog > p {
  font-family: "InterTight-Regular";
  margin: 0;
  margin-top: 1em;
  text-shadow: 
    2px 2px 5px hotpink, 
    2px -2px 5px hotpink, 
    -2px -2px 5px hotpink,
    -2px 2px 5px hotpink;
}

#mouse-highlighter {
  display: inline-block;
  min-width: 1em;
  min-height: 1em;

  background-color: hotpink;

  position: fixed;
  left: calc(
    var(--gv-mouse-x-px) * var(--TO-PIXEL)
  );
  top: calc(
    var(--gv-mouse-y-px) * var(--TO-PIXEL)
  );
}

#stage {
  background-image: url(images/stage.png);
  background-size: 100% 100%;

  display: inline-block;
  position: absolute;

  min-width: 100%;
  max-width: 100%;
  min-height: 100%;
  max-height: 100%;

}

.fruit {
  outline: 1px dashed lime;
  display: inline-block;
  min-width: calc(
    var(--gv-entity-size-em) * var(--TO-EM)
  );
  min-height: calc(
    var(--gv-entity-size-em) * var(--TO-EM)
  );
  border-radius: calc(
    var(--gv-entity-size-em) / 2 * var(--TO-EM)
  );
  
  /*MANIPULATING POSITION :  
    ***values for top***
    0% : top, inside viewport; 100% bottom, outside viewport

    ***values for left***
    0% : left, inside viewport; 100% right, outside viewport

    ***moving the div to the opposite end***
    calc(100% - div-dimension) moves the div to the end of their 
    respective axis without leaving the viewport, where `div-dimension`
    corresponds to the respective height or width of the div.
    */
  position: absolute;
  top: 100%;
  left: 0%;


  animation-name: anim-fruit-position, anim-fruit-spin;
  animation-iteration-count: infinite;
  animation-duration: calc(
    var(--fruit-lifespan-s) * var(--TO-SECONDS) 
  );
  animation-timing-function: linear;
}

.fruit-button {
  display: inline-block;
  min-width: calc(
    var(--gv-entity-size-em) * var(--TO-EM)
  );
  min-height: calc(
    var(--gv-entity-size-em) * var(--TO-EM)
  );
  border-radius: calc(
    var(--gv-entity-size-em) / 2 * var(--TO-EM)
  );
  
  /*MANIPULATING POSITION :  
    ***values for top***
    0% : top, inside viewport; 100% bottom, outside viewport

    ***values for left***
    0% : left, inside viewport; 100% right, outside viewport

    ***moving the div to the opposite end***
    calc(100% - div-dimension) moves the div to the end of their 
    respective axis without leaving the viewport, where `div-dimension`
    corresponds to the respective height or width of the div.
    */
  position: absolute;
  top: calc(
    (50 * var(--TO-PERCENT)) - (var(--gv-entity-size-em) * 0.5 * var(--TO-EM))
  );
  left: calc(
    (50 * var(--TO-PERCENT)) - (var(--gv-entity-size-em) * 0.5 * var(--TO-EM))
  );


  animation-name: anim-fruit-spin;
  animation-iteration-count: infinite;
  animation-duration: calc(
    var(--fruit-lifespan-s) * var(--TO-SECONDS) 
  );
  animation-timing-function: linear;
}

.fruit-half-1 {
  display: inline-block;
  min-width: 100%;
  min-height: 50%;
  
  /*NESTED ANIMATIONS METHOD
    ***pros***
    Accurate fruit half position spawning since mouseX/Y coordinates
    are unreliable and inaccurate; `getComputedStyles()` method might
    be possible to get accurate coordinate data for the element, but
    it's an expensive method on top of simultaneous DOM inserts and
    removals which could get laggy fast.

    Percentage based height/width works as long as the `position` property
    is set to `absolute`. `Bottom` also works as expected which is great.

    ***cons***
    The fruit half coordinate system is tied to the containing div's
    transform. So if the containing div is rotated, the fruit halves'
    x/y axis inherits the rotation. This could make implementing fruit
    rotation while it's launched very tedious. Scaling transforms will
    probably cause a bunch of headaches too.

    ***conclusion***
    I'll commit to the nested animations method since the benefit of
    accurate fruit half position spawning along with the performance
    benefits of avoiding `getComputedStyles` and less DOM updates is
    better than having rotating mid-flight fruits.

    Although maybe another solution can be to just reset the transform
    when the fruit is cut. That allows rotating fruits mid-air and 
    predictable fruit half cut physics to be written too.
   */
  position: absolute;
  /*ROTATION & THE AXES 1
    ***parent rotated 90deg***
    top : (right) +1 <---0---> -1 (left)
    left : (up) -1 <---0---> +1 (down)

    Right half.

    ***parent rotated 270deg***
    top : (right) -1 <---0---> +1 (left)
    left : (up) +1 <---0---> -1 (down)

    Left half.
   */
  top: 0%;
  left: 0%;

  animation-name: anim-fruit-half-1-position, anim-fruit-half-spin-left;
  animation-iteration-count: infinite;
  animation-duration: calc(
    var(--fruit-lifespan-s) * var(--TO-SECONDS) 
  );
  animation-timing-function: linear;
}

.fruit-half-2 {
  display: inline-block;
  min-width: 100%;
  min-height: 50%;

  position: absolute;
  /*ROTATION & THE AXES 2
    ***parent rotated 90deg***
    bottom : (right) -1 <---0---> +1 (left)
    left : (up) -1 <---0---> +1 (down)

    Left half.

    ***parent rotated 270deg***
    bottom : (right) +1 <---0---> -1 (left)
    left : (up) +1 <---0---> -1 (down)

    Right half.
   */
  bottom: 0%;
  left: 0%;


  animation-name: anim-fruit-half-2-position, anim-fruit-half-spin-right;
  animation-iteration-count: infinite;
  animation-duration: calc(
    var(--fruit-lifespan-s) * var(--TO-SECONDS) 
  );
  animation-timing-function: linear;
}

.cut-vfx {
  background-image: url(images/cut-vfx.png);
  background-size: 100% 100%;
  background-repeat: no-repeat;

  display: inline-block;
  min-width: 100%;
  min-height: 1px;

  position: absolute;
  filter: drop-shadow(2px 2px 10px hotpink);

  animation-name: anim-cut-vfx-size;
  animation-iteration-count: infinite;
  animation-duration: 250ms;
  animation-timing-function: linear;
}

.apple-half-1 {
  background-image: url(images/apple.png);
  background-size: cover;
}

.apple-half-2 {
  background-image: url(images/apple.png);
  background-size: cover;
  background-position-y: 100%;
}

.orange-half-1 {
  background-image: url(images/orange.png);
  background-size: cover;
}

.orange-half-2 {
  background-image: url(images/orange.png);
  background-size: cover;
  background-position-y: 100%;
}

.mango-half-1 {
  background-image: url(images/mango.png);
  background-size: cover;
}

.mango-half-2 {
  background-image: url(images/mango.png);
  background-size: cover;
  background-position-y: 100%;
}

.banana-half-1 {
  background-image: url(images/banana.png);
  background-size: cover;
}

.banana-half-2 {
  background-image: url(images/banana.png);
  background-size: cover;
  background-position-y: 100%;
}

.strawberry-half-1 {
  background-image: url(images/strawberry.png);
  background-size: cover;
}

.strawberry-half-2 {
  background-image: url(images/strawberry.png);
  background-size: cover;
  background-position-y: 100%;
}

.watermelon-half-1 {
  background-image: url(images/watermelon.png);
  background-size: cover;
}

.watermelon-half-2 {
  background-image: url(images/watermelon.png);
  background-size: cover;
  background-position-y: 100%;
}

.bomb {
  background-image: url(images/bomb.png);
  background-size: contain;

  outline: 1px dashed crimson;
  display: inline-block;
  min-width: calc(
    var(--gv-entity-size-em) * var(--TO-EM)
  );
  min-height: calc(
    var(--gv-entity-size-em) * var(--TO-EM)
  );

  border-radius: calc(
    var(--gv-entity-size-em) / 2 * var(--TO-EM)
  );
  
  position: absolute;
  top: 100%;
  left: 0%;


  animation-name: anim-fruit-position, anim-fruit-spin;
  animation-iteration-count: infinite;
  animation-duration: calc(
    var(--fruit-lifespan-s) * var(--TO-SECONDS) 
  );
  animation-timing-function: linear;
}

.bomb-explosion {
  background-color: crimson;

  display: inline-block;
  min-width: 100vw;
  min-height: 100vh;

  position: fixed;
  top: 0;
  left: 0;

  z-index: 2;

  animation-name: anim-bomb-explosion-opacity, anim-bomb-explosion-color;
  animation-iteration-count: infinite;
  animation-duration: 1000ms;
  animation-timing-function: ease-in-out;
}

.floating-points-text {
  display: inline-block;
  position: absolute;
  top: 0%;
  left: 0%;
  min-width: 100%;
  background-color: #345a;
  text-align: center;
  font-size: calc(
    var(--gv-entity-size-em) * 0.33 * var(--TO-EM)
  );
}




/**** Css Modifiers ****/

.set-animation-speed-to-half {
  animation-duration: calc(
    (var(--fruit-lifespan-s) * 2) * var(--TO-SECONDS) 
  );
}

.camera-shake {
  animation-name: anim-stage-shake;
  animation-iteration-count: infinite;
  animation-duration: 500ms;
  animation-timing-function: ease-in-out;
}

/*TODO: rework stage shake implementation to avoid using !important*/
.enforce-stage-position {
  top: 0% !important;
  left: 0% !important;
}

.pause-animation {
  animation-play-state: paused;
}

.hide {
  display: none;
}

/*TODO: rework fruit cut implementation to avoid using !important*/
.fruit-rotated-90deg {
  rotate: 90deg !important; /*override the rotation from the spin animation.*/
}

.fruit-rotated-270deg {
  rotate: 270deg !important;
}

.send-to-the-background {
  z-index: -1;
}

.foreground {
  z-index: 1;
}

.center{
  top: 50%;
  left: 50%;
}




/**** Keyframes ****/

/*PHYSICS SIMULATION
  To simulate physics, I generate keyframes @ 15 FPS and use CSS to linearly
  interpolate the values. 15 FPS seems to be a sweetspot of decent physics fidelity
  without manually writing out too much keyframe logic.
 */

/*KINEMATIC FORMULA FOR DISPLACEMENT
  s(t) = s_0 + (v_0 * t) + (0.5 * a * t^2) 

    where s_0 = initial spacial position, 
          v_0 = initial velocity, 
          a = acceleration and
          t = time.
  */
/*TODO: write python script to generate 100 keyframes for this animation.*/
@keyframes anim-fruit-position {
  0% {
    top : calc(
      var(--fruit-initial-y-pc) * var(--TO-PERCENT)
    );
    left : calc(
      var(--fruit-initial-x-pc) * var(--TO-PERCENT)
    );
  }

  6.6% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.066) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.066 ) * ( var(--fruit-lifespan-s) * 0.066 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.066) * var(--TO-PERCENT) ) 
    );
  }

  13.3% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.133) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.133 ) * ( var(--fruit-lifespan-s) * 0.133 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.133) * var(--TO-PERCENT) ) 
    );
  }

  20.0% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.200) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.200 ) * ( var(--fruit-lifespan-s) * 0.200 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.200) * var(--TO-PERCENT) ) 
    );
  }

  26.6% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.266) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.266 ) * ( var(--fruit-lifespan-s) * 0.266 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.266) * var(--TO-PERCENT) ) 
    );
  }

  33.3% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.333) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.333 ) * ( var(--fruit-lifespan-s) * 0.333 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.333) * var(--TO-PERCENT) ) 
    );
  }

  40.0% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.400) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.400 ) * ( var(--fruit-lifespan-s) * 0.400 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.400) * var(--TO-PERCENT) ) 
    );
  }

  46.6% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.466) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.466 ) * ( var(--fruit-lifespan-s) * 0.466 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.466) * var(--TO-PERCENT) ) 
    );
  }

  53.3% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.533) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.533 ) * ( var(--fruit-lifespan-s) * 0.533 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.533) * var(--TO-PERCENT) ) 
    );
  }

  60.0% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.600) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.600 ) * ( var(--fruit-lifespan-s) * 0.600 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.600) * var(--TO-PERCENT) ) 
    );
  }

  66.6% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.666) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.666 ) * ( var(--fruit-lifespan-s) * 0.666 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.666) * var(--TO-PERCENT) ) 
    );
  }

  73.3% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.733) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.733 ) * ( var(--fruit-lifespan-s) * 0.733 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.733) * var(--TO-PERCENT) ) 
    );
  }

  80.0% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.800) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.800 ) * ( var(--fruit-lifespan-s) * 0.800 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.800) * var(--TO-PERCENT) ) 
    );
  }

  86.6% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.866) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.866 ) * ( var(--fruit-lifespan-s) * 0.866 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.866) * var(--TO-PERCENT) ) 
    );
  }

  93.3% {
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.933) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 0.933 ) * ( var(--fruit-lifespan-s) * 0.933 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.933) * var(--TO-PERCENT) ) 
    );
  }

  100%{
    top : calc(
      ( var(--fruit-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 1) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--fruit-lifespan-s) * 1 ) * ( var(--fruit-lifespan-s) * 1 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--fruit-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--fruit-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 1) * var(--TO-PERCENT) ) 
    );
  }
  
}

/*VARIABLE INHERITANCE
  It seems that local variables declared inline can be accessed by the
  child element CSS classes. 

  It also seems that redeclaring the variable inline in the child element
  will override the variable value for the child element.
 */
@keyframes anim-fruit-half-2-position {
  0% {
    left : calc(
      0%
    );
    bottom : calc(
      0%
    );
  }

  6.6% {
    /* THE FRUIT ROTATION NORMALIZATION FACTOR
      I decided to have the fruits either be rotated 90deg or 270deg 
      when it is cut. I forgot why exactly, and I should have noted it
      down when I came up with the idea. I think it had something to do
      with having the fruit be horizontal when cut looking better in my
      mind? IDK.

      This normalization factor basically serves to invert the direction
      of `gravity` depending on which rotation (90/270) the parent container
      has to maintain the illusion of gravity.

      90deg -> 1; 270deg -> -1;

      ---note pasted from when I had the idea---
      Multiply velocity and acceleration by the rotation normalization factor.

      Basically what it is, is it inverts the values depending on 
      whether it's 90° Rotated or 270° rotated.

      This lets the fruit halves animate properly depending on the rotation.
     */
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.066) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.066 ) * ( var(--fruit-lifespan-s) * 0.066 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.066) * var(--TO-PERCENT) ) 
    );
  }

  13.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.133) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.133 ) * ( var(--fruit-lifespan-s) * 0.133 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.133) * var(--TO-PERCENT) ) 
    );
  }

  20.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.200) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.200 ) * ( var(--fruit-lifespan-s) * 0.200 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.200) * var(--TO-PERCENT) ) 
    );
  }

  26.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.266) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.266 ) * ( var(--fruit-lifespan-s) * 0.266 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.266) * var(--TO-PERCENT) ) 
    );
  }

  33.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.333) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.333 ) * ( var(--fruit-lifespan-s) * 0.333 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.333) * var(--TO-PERCENT) ) 
    );
  }

  40.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.400) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.400 ) * ( var(--fruit-lifespan-s) * 0.400 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.400) * var(--TO-PERCENT) ) 
    );
  }

  46.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.466) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.466 ) * ( var(--fruit-lifespan-s) * 0.466 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.466) * var(--TO-PERCENT) ) 
    );
  }

  53.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.533) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.533 ) * ( var(--fruit-lifespan-s) * 0.533 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.533) * var(--TO-PERCENT) ) 
    );
  }

  60.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.600) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.600 ) * ( var(--fruit-lifespan-s) * 0.600 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.600) * var(--TO-PERCENT) ) 
    );
  }

  66.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.666) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.666 ) * ( var(--fruit-lifespan-s) * 0.666 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.666) * var(--TO-PERCENT) ) 
    );
  }

  73.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.733) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.733 ) * ( var(--fruit-lifespan-s) * 0.733 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.733) * var(--TO-PERCENT) ) 
    );
  }

  80.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.800) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.800 ) * ( var(--fruit-lifespan-s) * 0.800 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.800) * var(--TO-PERCENT) ) 
    );
  }

  86.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.866) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.866 ) * ( var(--fruit-lifespan-s) * 0.866 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.866) * var(--TO-PERCENT) ) 
    );
  }

  93.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.933) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.933 ) * ( var(--fruit-lifespan-s) * 0.933 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.933) * var(--TO-PERCENT) ) 
    );
  }

  100%{
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 1) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 1 ) * ( var(--fruit-lifespan-s) * 1 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    bottom : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 1) * var(--TO-PERCENT) ) 
    );
  }
  
}

@keyframes anim-fruit-half-1-position {
  0% {
    left : calc(
      0%
    );
    top : calc(
      0%
    );
  }

  6.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.066) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.066 ) * ( var(--fruit-lifespan-s) * 0.066 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.066) * var(--TO-PERCENT) ) 
    );
  }

  13.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.133) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.133 ) * ( var(--fruit-lifespan-s) * 0.133 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.133) * var(--TO-PERCENT) ) 
    );
  }

  20.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.200) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.200 ) * ( var(--fruit-lifespan-s) * 0.200 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.200) * var(--TO-PERCENT) ) 
    );
  }

  26.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.266) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.266 ) * ( var(--fruit-lifespan-s) * 0.266 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.266) * var(--TO-PERCENT) ) 
    );
  }

  33.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.333) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.333 ) * ( var(--fruit-lifespan-s) * 0.333 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.333) * var(--TO-PERCENT) ) 
    );
  }

  40.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.400) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.400 ) * ( var(--fruit-lifespan-s) * 0.400 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.400) * var(--TO-PERCENT) ) 
    );
  }

  46.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.466) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.466 ) * ( var(--fruit-lifespan-s) * 0.466 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.466) * var(--TO-PERCENT) ) 
    );
  }

  53.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.533) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.533 ) * ( var(--fruit-lifespan-s) * 0.533 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.533) * var(--TO-PERCENT) ) 
    );
  }

  60.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.600) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.600 ) * ( var(--fruit-lifespan-s) * 0.600 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.600) * var(--TO-PERCENT) ) 
    );
  }

  66.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.666) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.666 ) * ( var(--fruit-lifespan-s) * 0.666 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.666) * var(--TO-PERCENT) ) 
    );
  }

  73.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.733) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.733 ) * ( var(--fruit-lifespan-s) * 0.733 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.733) * var(--TO-PERCENT) ) 
    );
  }

  80.0% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.800) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.800 ) * ( var(--fruit-lifespan-s) * 0.800 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.800) * var(--TO-PERCENT) ) 
    );
  }

  86.6% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.866) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.866 ) * ( var(--fruit-lifespan-s) * 0.866 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.866) * var(--TO-PERCENT) ) 
    );
  }

  93.3% {
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 0.933) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 0.933 ) * ( var(--fruit-lifespan-s) * 0.933 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 0.933) * var(--TO-PERCENT) ) 
    );
  }

  100%{
    left : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-y-velocity-pc) * (var(--fruit-lifespan-s) * 1) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) ) + 
      ( 0.5 * var(--gv-gravity-pc) * var(--gv-fruit-half-gravity-multiplier) * (( var(--fruit-lifespan-s) * 1 ) * ( var(--fruit-lifespan-s) * 1 )) * var(--fruit-rotation-normalization-factor) * var(--TO-PERCENT) )
    );
    top : calc(
      ( 0% ) + 
      ( var(--gv-fruit-half-initial-x-velocity-pc) * (var(--fruit-lifespan-s) * 1) * var(--TO-PERCENT) ) 
    );
  }
  
}

@keyframes anim-fruit-spin {
  0% {
    rotate: 0deg;
  }

  100% {
    rotate: calc(
      var(--fruit-rotation-normalization-factor) * 360 * (((var(--fruit-initial-x-velocity-pc) * var(--fruit-initial-x-velocity-pc)) * 0.005 + (var(--fruit-initial-y-velocity-pc) * -0.20)) / 2) * var(--TO-DEGREES)
    );
  }
}

@keyframes anim-fruit-half-spin-right {
  0% {
    rotate: 0deg;
  }

  100% {
    rotate: calc(
      var(--fruit-rotation-normalization-factor) * 360 * (var(--gv-fruit-half-initial-x-velocity-pc) / 10) * var(--TO-DEGREES)
    );
  }
}

@keyframes anim-fruit-half-spin-left {
  0% {
    rotate: 0deg;
  }

  100% {
    rotate: calc(
      var(--fruit-rotation-normalization-factor) * 360 * (var(--gv-fruit-half-initial-x-velocity-pc) / 10) * -1 * var(--TO-DEGREES)
    );
  }
}

@keyframes anim-cut-vfx-size {
  0% {
    left: 0%;
    top: 40%;
    min-width: 100%;
    max-width: 100%;
    min-height: 20%;
    max-height: 20%;
  }
  50% {
    left: -50%;
    top: 49.49%;
    min-width: 200%;
    max-width: 200%;
    min-height: 1%;
    max-height: 1%;
  }
  100% {
    left: -100%;
    top: 49.5%;
    min-width: 300%;
    max-width: 300%;
    min-height: 1%;
    max-height: 1%;
  }
}

@keyframes anim-cut-vfx-opacity {
  0% {
    opacity: 100%;
  }

  100% {
    opacity: 0%;
  }
}

/*TODO: Remove this, it's no longer needed*/
@keyframes anim-bomb-position {
  0% {
    top : calc(
      var(--bomb-initial-y-pc) * var(--TO-PERCENT)
    );
    left : calc(
      var(--bomb-initial-x-pc) * var(--TO-PERCENT)
    );
  }

  6.6% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.066) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.066 ) * ( var(--bomb-lifespan-s) * 0.066 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.066) * var(--TO-PERCENT) ) 
    );
  }

  13.3% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.133) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.133 ) * ( var(--bomb-lifespan-s) * 0.133 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.133) * var(--TO-PERCENT) ) 
    );
  }

  20.0% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.200) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.200 ) * ( var(--bomb-lifespan-s) * 0.200 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.200) * var(--TO-PERCENT) ) 
    );
  }

  26.6% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.266) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.266 ) * ( var(--bomb-lifespan-s) * 0.266 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.266) * var(--TO-PERCENT) ) 
    );
  }

  33.3% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.333) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.333 ) * ( var(--bomb-lifespan-s) * 0.333 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.333) * var(--TO-PERCENT) ) 
    );
  }

  40.0% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.400) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.400 ) * ( var(--bomb-lifespan-s) * 0.400 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.400) * var(--TO-PERCENT) ) 
    );
  }

  46.6% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.466) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.466 ) * ( var(--bomb-lifespan-s) * 0.466 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.466) * var(--TO-PERCENT) ) 
    );
  }

  53.3% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.533) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.533 ) * ( var(--bomb-lifespan-s) * 0.533 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.533) * var(--TO-PERCENT) ) 
    );
  }

  60.0% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.600) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.600 ) * ( var(--bomb-lifespan-s) * 0.600 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.600) * var(--TO-PERCENT) ) 
    );
  }

  66.6% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.666) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.666 ) * ( var(--bomb-lifespan-s) * 0.666 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.666) * var(--TO-PERCENT) ) 
    );
  }

  73.3% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.733) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.733 ) * ( var(--bomb-lifespan-s) * 0.733 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.733) * var(--TO-PERCENT) ) 
    );
  }

  80.0% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.800) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.800 ) * ( var(--bomb-lifespan-s) * 0.800 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.800) * var(--TO-PERCENT) ) 
    );
  }

  86.6% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.866) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.866 ) * ( var(--bomb-lifespan-s) * 0.866 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.866) * var(--TO-PERCENT) ) 
    );
  }

  93.3% {
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 0.933) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 0.933 ) * ( var(--bomb-lifespan-s) * 0.933 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 0.933) * var(--TO-PERCENT) ) 
    );
  }

  100%{
    top : calc(
      ( var(--bomb-initial-y-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-y-velocity-pc) * (var(--bomb-lifespan-s) * 1) * var(--TO-PERCENT) ) + ( 0.5 * var(--gv-gravity-pc) * (( var(--bomb-lifespan-s) * 1 ) * ( var(--bomb-lifespan-s) * 1 )) * var(--TO-PERCENT) )
    );
    left : calc(
      ( var(--bomb-initial-x-pc) * var(--TO-PERCENT) ) + ( var(--bomb-initial-x-velocity-pc) * (var(--bomb-lifespan-s) * 1) * var(--TO-PERCENT) ) 
    );
  }
  
}

@keyframes anim-bomb-explosion-opacity {
  0% {
    opacity: 100%;
  }

  100% {
    opacity: 0%;
  }
}

@keyframes anim-bomb-explosion-color {
  0% {
    background-color: #a00;
  }

  10% {
    background-color: #f00;
  }

  20% {
    background-color: #fff;
  }

  100% {
    background-color: #fff;
  }
}

/*
@keyframes 15fps-template {
  0% {
  }

  6.6% {
  }

  13.3% {
  }

  20.0% {
  }

  26.6% {
  }

  33.3% {
  }

  40.0% {
  }

  46.6% {
  }

  53.3% {
  }

  60.0% {
  }

  66.6% {
  }

  73.3% {
  }

  80.0% {
  }

  86.6% {
  }

  93.3% {
  }

  100% {
  }
}
*/